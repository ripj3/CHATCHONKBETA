# .github/workflows/kimi-review.yml
#
# ──────────────────────────────────────────────────────────────────────────────
#  GitHub Action  |  Automated PR code reviews using Moonshot Kimi-Dev-72B
#                 |  + manual “Run workflow” button
#
#  Secret needed
#  --------------
#  MOONSHOT_AI_KIMIDEV = sk-xxxxxxxxxxxxxxxx  (add in Settings → Secrets → Actions)
# ──────────────────────────────────────────────────────────────────────────────

name: "Kimi code review (full-then-diff + manual)"

###############################################################################
# When should this workflow run?
#   • pull_request/opened        → first time a PR appears  (full-repo review)
#   • pull_request/synchronize   → every new commit to the PR (diff-only)
#   • workflow_dispatch          → manual click in Actions UI
###############################################################################
on:
  pull_request:
    types: [opened, synchronize]

  workflow_dispatch:         # ← adds the “Run workflow” button

###############################################################################
jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read          # allow code checkout
      pull-requests: write    # allow posting a comment

    steps:

    # 1) Checkout repository so we can read files / diffs
    - name: "Checkout code"
      uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # 2) Decide scope & model
    #    - opened       → full repo  → 128k-token model
    #    - synchronize  → diff only →  32k-token model
    #    - workflow_dispatch → **forces** full repo (uses 128k)
    - name: "Set context variables"
      id: ctx
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "MODE=kimidev-72b-128k"  >> "$GITHUB_OUTPUT"
          echo "SCOPE=repo"             >> "$GITHUB_OUTPUT"
        elif [ "${{ github.event.action }}" = "opened" ]; then
          echo "MODE=kimidev-72b-128k"  >> "$GITHUB_OUTPUT"
          echo "SCOPE=repo"             >> "$GITHUB_OUTPUT"
        else
          echo "MODE=kimidev-72b-32k"   >> "$GITHUB_OUTPUT"
          echo "SCOPE=diff"             >> "$GITHUB_OUTPUT"
        fi

    # 3) Collect code text: whole repo *or* just the PR diff
    - name: "Collect code to review"
      id: blob
      run: |
        if [ "${{ steps.ctx.outputs.SCOPE }}" = "repo" ]; then
          # WHOLE REPO: concatenate tracked files, trim to ~90k tokens
          git ls-files -z | xargs -0 cat | head -c 360000 > review.txt
        else
          # DIFF ONLY
          curl -sL "${{ github.event.pull_request.diff_url }}" > review.txt
        fi
        sed -i 's/`/‘‘/g' review.txt         # escape back-ticks
        echo "BLOB=$(base64 -w0 review.txt)" >> "$GITHUB_OUTPUT"

    # 4) Call Moonshot
    - name: "Ask Kimi-Dev"
      id: kimi
      env: { MOONSHOT_KEY: ${{ secrets.MOONSHOT_AI_KIMIDEV }} }
      run: |
        MODEL="${{ steps.ctx.outputs.MODE }}"
        DIFF_JSON=$(echo "${{ steps.blob.outputs.BLOB }}" | base64 -d | jq -Rs .)

        jq -n --arg model "$MODEL" --arg diff "$DIFF_JSON" '
        { model:$model,
          messages:[
            {role:"system",
             content:"You are an expert software engineer. Provide a concise, line-referenced GitHub code review of the content supplied."},
            {role:"user", content:($diff|fromjson)}
          ],
          max_tokens:512, temperature:0.2 }' > payload.json

        STATUS=$(curl -s -o resp.json -w "%{http_code}" \
          -H "Authorization: Bearer $MOONSHOT_KEY" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          https://api.moonshot.ai/v1/chat/completions)

        echo "Moonshot HTTP: $STATUS"
        cat resp.json
        [ "$STATUS" = "200" ] || exit 1

        REVIEW=$(jq -r '.choices[0].message.content' resp.json)
        echo "REVIEW<<EOF" >> "$GITHUB_OUTPUT"
        echo "$REVIEW"      >> "$GITHUB_OUTPUT"
        echo "EOF"          >> "$GITHUB_OUTPUT"

    # 5) Post result
    - name: "Comment on PR"
      if: github.event_name != 'workflow_dispatch'   # manual runs have no PR ID
      env: { GH_TOKEN: ${{ github.token }} }
      run: |
        BODY=$(jq -Rs '.' <<< "🤖 **Kimi-Dev review**  
        _Model:_ ${{ steps.ctx.outputs.MODE }}\n\n${{ steps.kimi.outputs.REVIEW }}")

        curl -s -X POST \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          -d "{\"body\": $BODY}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

    # 6) Save raw JSON response for troubleshooting
    - name: "Save raw response (debug)"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: moonshot-response
        path: resp.json
