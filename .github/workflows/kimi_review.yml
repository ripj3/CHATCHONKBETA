# .github/workflows/kimi-review.yml
#
# Robust Kimi-Dev 72 B PR reviewer
# â”€ First PR commit / manual run â†’ full repo (minus libs) with 128 K model
# â”€ Later commits               â†’ diff-only with 32 K model
# â”€ Built-in concurrency        â†’ cancels older runs
#
# REQUIRED secret (repo â†’ Settings â†’ Secrets â†’ Actions):
#   MOONSHOT_AI_KIMIDEV = sk-xxxxxxxxxxxxxxxxxxxxxxxx
# ------------------------------------------------------------------------------

name: "Kimi code review"

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

concurrency:
  group: kimi-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    # 0) verify secret exists
    - name: Validate secret
      run: |
        [[ -n "${{ secrets.MOONSHOT_AI_KIMIDEV }}" ]] \
          || { echo "::error ::MOONSHOT_AI_KIMIDEV secret missing"; exit 1; }

    # 0.5) ensure jq present (edge-case)
    - run: |
        command -v jq >/dev/null || sudo apt-get update -y && sudo apt-get install -y jq

    # 1) checkout
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # 2) decide scope/model
    - id: ctx
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" || \
              "${{ github.event.action }}" == "opened" ]]; then
          echo "MODE=kimidev-72b-128k" >> $GITHUB_OUTPUT
          echo "SCOPE=repo"            >> $GITHUB_OUTPUT
        else
          echo "MODE=kimidev-72b-32k"  >> $GITHUB_OUTPUT
          echo "SCOPE=diff"            >> $GITHUB_OUTPUT
        fi

    # 3) confirm model exists for this key
    - name: Check model availability
      env:
        MOONSHOT_AI_KIMIDEV: ${{ secrets.MOONSHOT_AI_KIMIDEV }}
      run: |
        curl -s https://api.moonshot.ai/v1/models \
          -H "Authorization: Bearer $MOONSHOT_AI_KIMIDEV" |
          jq -e --arg m "${{ steps.ctx.outputs.MODE }}" '.data[].id | select(. == $m)' \
          || { echo "::error ::Model ${{ steps.ctx.outputs.MODE }} not available"; exit 1; }

    # 4) collect code/diff minus libs & binaries
    - id: blob
      run: |
        EX='node_modules|vendor|dist|build|\.next|\.venv|\.cache|__pycache__'
        if [[ "${{ steps.ctx.outputs.SCOPE }}" == "repo" ]]; then
          git ls-files -z | grep -zEv "(${EX})" |
          xargs -0 -I{} bash -c '[[ $(wc -c < "{}") -lt 307200 ]] && cat "{}"' |
          head -c 360000 > blob.txt
        else
          curl -sL "${{ github.event.pull_request.diff_url }}" |
          grep -Ev "^diff --git a/(${EX})/" > blob.txt
        fi
        sed -i 's/`/â€˜â€˜/g' blob.txt
        echo "FILE=blob.txt" >> $GITHUB_OUTPUT

    # 5) build payload & call Moonshot (retry 429/5xx)
    - id: kimi
      env:
        MOONSHOT_AI_KIMIDEV: ${{ secrets.MOONSHOT_AI_KIMIDEV }}
      run: |
        jq -n --rawfile diff "${{ steps.blob.outputs.FILE }}" \
               --arg m "${{ steps.ctx.outputs.MODE }}" '{
          model: $m,
          messages:[
            {role:"system",
             content:"You are an expert software engineer. Provide a concise, line-referenced GitHub code review of the content supplied."},
            {role:"user", content: $diff}
          ],
          max_tokens:512,
          temperature:0.2
        }' > payload.json

        for a in 0 1 2; do
          STATUS=$(curl -s -w "%{http_code}" -o resp.json \
                   -H "Authorization: Bearer $MOONSHOT_AI_KIMIDEV" \
                   -H "Content-Type: application/json" \
                   --data @payload.json \
                   https://api.moonshot.ai/v1/chat/completions) && break
          code=${STATUS: -3}
          [[ "$code" =~ 429|500|502|503|504 ]] || break
          sleep $(( (2**a) * 5 ))
        done
        echo "Moonshot HTTP $STATUS"
        [[ "$STATUS" == *200 ]] || { cat resp.json; exit 1; }

        jq -r '.choices[0].message.content' resp.json > review.txt
        echo "REVIEW<<EOF" >> $GITHUB_OUTPUT
        cat review.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # 6) post comment (skip manual run)
    - if: github.event_name != 'workflow_dispatch'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        BODY=$(jq -Rs '.' <<< "ðŸ¤– **Kimi-Dev review**\n_Model:_ ${{ steps.ctx.outputs.MODE }}\n\n$(cat review.txt)")
        curl -s -X POST \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          -d "{\"body\": $BODY}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

    # 7) save raw response (debug)
    - if: always()
      uses: actions/upload-artifact@v4
      with:
        name: moonshot-response
        path: resp.json

  # This is another minor change to trigger the workflow.
